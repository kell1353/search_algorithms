import search_algorithms as sa

# --------------------------- PROGRAM Begin

# Tree Structure for the Examples

# 				--> j 
# 				|   |
# 		--> c ----> f - |    ---> l
# 		| 		|   | 	  |
# 		| 		--> i 	  |
# 	 	| 			  v
# 	s ------|-> b ----> e ---> h ---> k
# 		|   ^ \	    | 			  
# 		|   |   \   | ---> g 
# 		|   |     \ |
# 		|   ------> d 
# 		|   |
#		--> a

# Setting the nodes for the best-first search tree
# node_name: [[child_node, arb_val, dist_from_parent]]
#-------------------------------------------------------------------
node_tree1 = {'s': [['a', 0, 7], ['b', 0, 2], ['c', 0, 3]], 
			  'a': [['b', 0, 3], ['d', 0, 4]], 'b': [['d', 0, 4], ['e', 0, 1]], 
			  'c': [['f', 0, 2]], 'd': [['g', 0, 5]], 'e': [['g', 0, 3], ['h', 0, 2]], 
			  'f': [['i', 0, 4], ['j', 0, 4]], 'h': [['k', 0, 2]], 
			  'i': [['l', 0, 4]], 'j': [['l', 0, 4]], 'l': [['k', 0, 5]],
			  'g': [[None, 0, 0]] , 'k': [[None, 0, 0]]}
#-------------------------------------------------------------------

# Setting the nodes for the breadth-first and depth-first search tree
#-------------------------------------------------------------------
node_tree2 = {'s': [['a', 12, 7], ['b', 10, 2], ['c',15, 3]], 
			  'a': [['b', 10, 3], ['d', 9, 4]], 'b': [['d', 9, 4], ['e', 7, 1]], 
			  'c': [['f', 8, 2]], 'd': [['g', 5, 5]], 'e': [['g', 5, 3], ['h', 7, 2]], 
			  'f': [['i', 6, 4], ['j', 4, 4]], 'h': [['k', 2, 2]], 
			  'i': [['l', 1, 4]], 'j': [['l', 1, 4]], 'l': [['k', 2, 5]]}
#-------------------------------------------------------------------


sa.best_fs(node_tree1, 's', 'g')
sa.breadth_fs(node_tree2, 's', 4.5)
sa.iter_deepening(node_tree2, 's', 5, 10)
